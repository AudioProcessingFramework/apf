name: Build Pd Externals
on: [push, pull_request]
jobs:
  linux:
    runs-on: ubuntu-latest
    steps:
      - name: install Ubuntu packages
        run: |
          sudo apt-get install --no-install-recommends puredata-dev
      - name: checkout APF
        uses: actions/checkout@v5
        with:
          submodules: true
          path: apf
      - name: build externals
        working-directory: apf/examples/pure-data
        run: |
          make install DESTDIR=build PDLIBDIR=
      - name: upload Linux externals
        uses: actions/upload-artifact@v4
        with:
          name: linux-externals
          path: apf/examples/pure-data/build/*

  macos:
    runs-on: macos-latest
    env:
      cflags: -mmacosx-version-min=10.9
    steps:
      - name: install macOS packages
        run: |
          brew install --cask pd
      - name: checkout APF
        uses: actions/checkout@v5
        with:
          submodules: true
          path: apf
      - name: build externals
        working-directory: apf/examples/pure-data
        run: |
          make install DESTDIR=build PDLIBDIR=
      - name: upload macOS externals
        uses: actions/upload-artifact@v4
        with:
          name: macos-externals
          path: apf/examples/pure-data/build/*

  windows:
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - name: Install MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: ucrt64
          release: false
          install: >-
            make
            unzip
          pacboy: >-
            gcc:p
      - name: Install Pd
        run: |
          wget -q -O Pd.zip http://msp.ucsd.edu/Software/pd-0.51-3.msw.zip
          rm -rf "${PROGRAMFILES}/pd" && mkdir -p "${PROGRAMFILES}/pd"
          unzip -q Pd.zip -d "${PROGRAMFILES}/pd"
          mv -v "${PROGRAMFILES}/pd"/*/* "${PROGRAMFILES}/pd"
          rm -f Pd.zip
          export PD="${PROGRAMFILES}/pd/bin/pd.com"
      - name: checkout APF
        uses: actions/checkout@v5
        with:
          submodules: true
          path: apf
      - name: build externals
        working-directory: apf/examples/pure-data
        run: |
          make install DESTDIR=build PDLIBDIR=
      - name: upload Windows externals
        uses: actions/upload-artifact@v4
        with:
          name: windows-externals
          path: apf/examples/pure-data/build/*

  deken-package:
    runs-on: ubuntu-latest
    container: registry.git.iem.at/pd/deken
    needs: [linux, macos, windows]
    steps:
      - name: Install Git
        run: |
          apt-get update
          apt-get install --assume-yes --no-install-recommends git
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          # check out all tags to get proper version in Deken package
          fetch-depth: 0
      - name: git clone fix
        # https://github.com/actions/checkout/issues/1169:
        run: git config --system --add safe.directory $GITHUB_WORKSPACE
      - name: Retrieve Linux externals
        uses: actions/download-artifact@v5
        with:
          name: linux-externals
          path: apf_example
      - name: Retrieve macOS external
        uses: actions/download-artifact@v5
        with:
          name: macos-externals
          path: apf_example
      - name: Retrieve Windows external
        uses: actions/download-artifact@v5
        with:
          name: windows-externals
          path: apf_example
      - name: Run deken
        run: |
          deken package -v $(git describe --tags --always) --objects examples/pure-data/objects.txt apf_example
      - name: Upload deken package
        uses: actions/upload-artifact@v4
        with:
          name: Deken package
          path: "*.dek*"
