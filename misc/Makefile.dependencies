# This Makefile automagically creates dependency files for .cpp source files.
# Rules for other file types can be added easily.
#
# In your primary Makefile, set a DEPENDENCIES variable containing your
# executable files (if they have according .cpp files) and additional object
# files and include Makefile.dependencies at the very end:
#
#   DEPENDENCIES = mysource1 mysource2 mysource3 myobject1.o
#   include Makefile.dependencies
#
# For further customization you can also set the variables DEPENDENCY_EXT,
# DEPENDENCY_DIR and NO_INCLUDE_DEPENDENCIES.

# Author: Matthias Geier, 2011

DEPENDENCY_EXT ?= dep
DEPENDENCY_DIR ?= .dep

# don't include dependencies for those targets:
NO_INCLUDE_DEPENDENCIES += clean

DECORATED_DEPENDENCIES = $(DEPENDENCIES:%=$(DEPENDENCY_DIR)/%.$(DEPENDENCY_EXT))

DEPENDENCY_MESSAGE = @echo Dependency file \"$@\" updated

$(DEPENDENCY_DIR):
	mkdir -p $(DEPENDENCY_DIR)

$(DEPENDENCY_DIR)/%.o.$(DEPENDENCY_EXT): %.cpp | $(DEPENDENCY_DIR)
	@$(RM) $@; $(CXX) -MM -MF $@ -MT "$*.o $@" $(CPPFLAGS) $< > /dev/null
	$(DEPENDENCY_MESSAGE)

$(DEPENDENCY_DIR)/%.$(DEPENDENCY_EXT): %.cpp | $(DEPENDENCY_DIR)
	@$(RM) $@; $(CXX) -MM -MF $@ -MT "$* $@" $(CPPFLAGS) $< > /dev/null
	$(DEPENDENCY_MESSAGE)

# other file types (e.g. *.c) could be added like this:

#$(DEPENDENCY_DIR)/%.o.$(DEPENDENCY_EXT): %.c | $(DEPENDENCY_DIR)
#	somehow generate dependency files ...

# filter additional dependency files from default rule:
%: %.cpp
	$(LINK.cpp) $< $(filter %.o, $^) $(LOADLIBES) $(LDLIBS) -o $@

# include dependency files generated in the previous step
ifeq (,$(findstring $(MAKECMDGOALS), $(NO_INCLUDE_DEPENDENCIES)))
-include $(DECORATED_DEPENDENCIES)
endif

clean: clean.dependencies

clean.dependencies:
	$(RM) $(DECORATED_DEPENDENCIES)
	rmdir $(DEPENDENCY_DIR) 2> /dev/null || true

.PHONY: clean clean.dependencies
